<program> ::= <statements> "EOF"

<statements> ::= (<statement>)+
<statement> ::= (<declaration>  | <expression> | <if> | <while> | <for> | <return> | <break> | <continue> | <function> | <struct_s> | <print>) <endl>

<declaration> ::= <declaration_token>
<declaration_token>::=<type> <set_token> push_id()("," <set_token> push_id())*
<type>::="int"|"float"|"string"|"char"|"bool" | <token>
<set_token> ::= <token> | <token> "=" <assigment_expression>
<token>::=<char>(<char>|<number>)*

<if> ::= "if" "(" <expression> ")" tid::create_node() <body_start> <statements> <body_end> tid::delete_node() (<elif>)* ("else" tid::create_node() <body_start> <statements> <body_end> tid::delete_node())?
<elif> ::= "elif" "(" <expression> ")" tid::create_node() <body_start> <statements> <body_end> tid::delete_node()
<while> ::= "while" "(" <expression> ")" tid::create_node() <body_start> <statements> <body_end> tid::delete_node()
<for> ::= "for" tid::create_node() "(" <declaration> ";" <expression> ";" <expression> ")" <body_start> <statements> <body_end> tid::delete_node()
<return> ::= "return" <assigment_expression>
<break> ::= "break"
<continue> ::= "continue"

<function> ::= "func" <token> "(" <arg_list> ")" "->" <type> <body_start> <statements> <body_end>
<arg_list>::= <type> <token>(","<type> <token>)* | EMPTY
<call_arg_list> ::= <assigment_expression>(","<assigment_expression>)* | EMPTY

<struct_s> ::= "struct" <token> <body_start> <struct_statements> <body_end>
<struct_statements> ::= <struct_statement> (";" <struct_statement>)*
<struct_statement> ::= (<access_type> <declaration_token> | <access_type> <function> | <struct_property>) <endl>
<access_type> ::= "public"|"private"
<struct_property> ::= "property" <type> <token>

<print> ::= "print" "(" <call_arg_list> ")"


<expression> ::= <assigment_expression> (","<assigment_expression>)* stack_clear()
<assigment_expression> ::= <logical_or> <assign_operator> <assigment_expression> | <logical_or>

<logical_or> ::= <logical_and> "||" push_type_op() <logical_or> check_bin() | <logical_and>
<logical_and> ::= <bit_or> "&&" push_type_op() <logical_and> check_bin() | <bit_or>

<bit_or> ::= <bit_xor> "|" push_type_op() <bit_or> check_bin() | <bit_xor>
<bit_xor> ::= <bit_and> "^" push_type_op() <bit_xor> check_bin() | <bit_and>
<bit_and> ::= <equal_comparison> "&" push_type_op() <bit_and> check_bin() | <equal_comparison>

<equal_comparison> ::= <compare> ("==" | "!=") push_type_op() <equal_comparison> check_bin() | <compare>
<compare> ::= <shift> (">" | ">=" | "<" | "<=") push_type_op() <compare> check_bin() | <shift>

<shift> ::= <addition> (">>" | "<<") push_type_op() <shift> check_bin() | <addition>

<addition> ::= <multiplication> ("+" | "-") push_type_op() <addition> check_bin() | <multiplication>

<multiplication> ::= <power> ("/" | "*" | "%") push_type_op() <multiplication> check_bin() | <power>

<power> ::= <unary> "**" push_type_op() <power> check_bin() | <unary>

<unary> ::= ("+" | "-" | "~" | "!" | "++" | "--") push_type_op() <unary> check_uno() | <postfix>

<postfix> ::= <point_call> ("++" | "--") push_type_op() check_postfix() | <point_call>

<point_call> ::= <token_exp> "." push_type_op() <point_call> check_bin() | <token_exp> "(" <call_arg_list> ")" check_call_function() | <token_exp>

<token_exp> ::= <token> push_type_op() | <literal> push_type_op() "(" <expression> ")" | "(" <expression> ")"

<char>::="a-z"|"A-Z"
<digit>::="0-9"
<endl>::=";"
<body_start>::="{"
<body_end>::="}"

<literal>::=<number>|<string>|<boolean>
<string>::="\""<char>*"\""
<number>::=<digit>+"."<digit>*|<digit>+"."|<digit>+
<boolean>::="true"|"false"

<binary_operator>::="*"|"+"|"/"|"**"|">>"|"<<"|">"|">="|"<"|"<="
<assign_operator>::=[<binary_operator>]"="
