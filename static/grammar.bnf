<program> ::= <preprocessor> <statements> "EOF"

<preprocessor> ::= ("import"(<token>|<string>) <endl>)*
<statements> ::= (<statement>)+
<statement> ::= (<declaration>  | <expression> | <if> | <while> | <for> | <return> | <break> | <continue> | <function> | <struct_s> | <print>) <endl>

<declaration> ::= <declaration_token>
<declaration_token>::=<type> <set_token>("," <set_token>)*
<type>::="int"|"float"|"string"|"char"|"bool"| "List""<"<type>">" | "Set""<"<type>">" | <token>
<set_token> ::= <token> | <token> "=" <expression>
<token>::=<char>(<char>|<number>)*

<if> ::= "if" "(" <expression> ")" <body_start> <statements> <body_end> (<elif>)* ("else" <body_start> <statements> <body_end>)?
<elif> ::= "elif" "(" <expression> ")" <body_start> <statements> <body_end>
<while> ::= "while" "(" <expression> ")" <body_start> <statements> <body_end>
<for> ::= "for" "(" <declaration> ";" <expression> ";" <expression> ")" <body_start> <statements> <body_end>
<return> ::= "return" <expression>
<break> ::= "break"
<continue> ::= "continue"

<function> ::= "func" <token> "(" <arg_list> ")" "->" <type> <body_start> <statements> <body_end>
<arg_list>::= <type> <token>(","<type> <token>)* | EMPTY
<call_arg_list> ::= <assigment_expression>(","<assigment_expression>)* | EMPTY

<struct_s> ::= "struct" <token> <body_start> <struct_statements> <body_end>
<struct_statements> ::= <struct_statement> (";" <struct_statement>)*
<struct_statement> ::= (<access_type> <declaration_token> | <access_type> <function> | <struct_property>) <endl>
<access_type> ::= "public"|"private"
<struct_property> ::= "property" <type> <token>

<print> ::= "print" "(" <call_arg_list> ")"


<expression> ::= <assigment_expression> (","<assigment_expression>)*
<assigment_expression> ::= <logical_or> <assign_operator> <init_expression> | <logical_or>
<init_expression> ::= <assigment_expression> | <init_list>
<init_list> ::= <body_start> <init_list_seq> <body_end>
<init_list_seq> ::= <assigment_expression> | <assigment_expression>","<init_list_seq>

<logical_or> ::= <logical_and> "||" <logical_or> | <logical_and>
<logical_and> ::= <bit_or> "&&" <logical_and> | <bit_or>

<bit_or> ::= <bit_xor> "|" <bit_or> | <bit_xor>
<bit_xor> ::= <bit_and> "^" <bit_xor> | <bit_and>
<bit_and> ::= <equal_comparison> "&" <bit_and> | <equal_comparison>

<equal_comparison> ::= <compare> ("==" | "!=") <equal_comparison> | <compare>
<compare> ::= <shift> (">" | ">=" | "<" | "<=") <compare> | <shift>

<shift> ::= <sum_sub> (">>" | "<<") <shift> | <sum_sub>

<sum_sub> ::= <mul_div> <sign> <sum_sub> | <mul_div>

<mul_div> ::= <power> ("/" | "*" | "%") <mul_div> | <power>

<power> ::= <unary> "**" <power> | <unary>

<unary> ::= ("+" | "-" | "~" | "!" | "++" | "--") <unary> | <postfix>

<postfix> ::= <point> ("++" | "--")  | <point>

<point> ::= <namespace> "." <point> | <namespace>

<namespace> ::= <token_exp> "::" <namespace> | <token_exp>

<token_exp> ::= <token> "(" <call_arg_list> ")" | <literal> "(" <expression> ")" | "(" <expression> ")"

<char>::="a-z"|"A-Z"
<digit>::="0-9"
<sign>::="+"|"-"
<endl>::=";"
<body_start>::="{"
<body_end>::="}"

<literal>::=<number>|<string>|<boolean>
<string>::="\""<char>*"\""
<number>::=<digit>+"."<digit>*|<digit>+"."|<digit>+
<boolean>::="true"|"false"

<binary_operator>::="*"|"+"|"/"|"**"|">>"|"<<"|">"|">="|"<"|"<="
<assign_operator>::=[<binary_operator>]"="
